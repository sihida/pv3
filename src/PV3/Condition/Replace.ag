{- |
Attribute grammar for replacing boolean/int (sub)expressions with (other) boolean/int (sub)expressions (in a boolean expression).

Part of PV - Project 3.

Authors: Jaap van der Plas and Danny Bergsma
Version: 0.1, 2 April 2013
-}

module {PV3.Condition.Replace}{}
{
import PV3.Condition.ConditionAST

import Data.Maybe
}

include "ConditionAST.ag"  -- semantics in this attribute grammar are defined over the datatypes from ConditionAST

attr Cond IExpr
  inh   toReplaceWithC :: {Maybe (Cond,  Cond)}   -- ^ If Just: first element (boolean (sub)expression) should be replaced with second element (boolean (sub)expression). If Nothing: no boolean replacements should be done.
  inh   toReplaceWithI :: {Maybe (IExpr, IExpr)}  -- ^ If Just: first element (int (sub)expression) should be replaced with second element (int (sub)expression). If Nothing: no int replacements should be done.
  syn   copy           :: self                    -- ^ If we do not need to replace the Cond/IExpr, we should just keep its copy.
  
sem Cond
  | *                   lhs.copy = if   isJust @lhs.toReplaceWithC 
                                   then let (Just (toReplace, replaceWith)) = @lhs.toReplaceWithC
                                        in  if   @copy == toReplace 
                                            then replaceWith 
                                            else @copy
                                   else @copy

sem IExpr
  | ITopStackIndex      lhs.copy = if   isJust @lhs.toReplaceWithI 
                                   then let (Just (toReplace, replaceWith)) = @lhs.toReplaceWithI
                                        in  if   isTopStackIndex toReplace
                                            then if   isTopStackIndex replaceWith
                                                 then let (ITopStackIndex offset') = replaceWith in ITopStackIndex (@offset + offset')
                                                 else IAdd replaceWith (ILit @offset)
                                            else @copy
                                   else @copy
  | * - ITopStackIndex  lhs.copy = if   isJust @lhs.toReplaceWithI 
                                   then let (Just (toReplace, replaceWith)) = @lhs.toReplaceWithI
                                        in  if   @copy == toReplace 
                                            then replaceWith 
                                            else @copy
                                   else @copy
                  
{
-- | Returns whether the given int expression represents T.
isTopStackIndex :: IExpr  -- ^ The int expression that will be analyzed.
                -> Bool   -- ^ Returns True iff the given int expression represents T.
isTopStackIndex (ITopStackIndex _) = True
isTopStackIndex _                  = False
}